class Aes{static cipher(e,t){const r=t.length/4-1;let o=[[],[],[],[]];for(let t=0;t<16;t++)o[t%4][Math.floor(t/4)]=e[t];o=Aes.addRoundKey(o,t,0,4);for(let e=1;e<r;e++)o=Aes.subBytes(o,4),o=Aes.shiftRows(o,4),o=Aes.mixColumns(o,4),o=Aes.addRoundKey(o,t,e,4);o=Aes.subBytes(o,4),o=Aes.shiftRows(o,4),o=Aes.addRoundKey(o,t,r,4);const n=new Array(16);for(let e=0;e<16;e++)n[e]=o[e%4][Math.floor(e/4)];return n}static keyExpansion(e){const t=e.length/4,r=t+6,o=new Array(4*(r+1));let n=new Array(4);for(let r=0;r<t;r++){const t=[e[4*r],e[4*r+1],e[4*r+2],e[4*r+3]];o[r]=t}for(let e=t;e<4*(r+1);e++){o[e]=new Array(4);for(let t=0;t<4;t++)n[t]=o[e-1][t];if(e%t==0){n=Aes.subWord(Aes.rotWord(n));for(let r=0;r<4;r++)n[r]^=Aes.rCon[e/t][r]}else t>6&&e%t==4&&(n=Aes.subWord(n));for(let r=0;r<4;r++)o[e][r]=o[e-t][r]^n[r]}return o}static subBytes(e,t){for(let r=0;r<4;r++)for(let o=0;o<t;o++)e[r][o]=Aes.sBox[e[r][o]];return e}static shiftRows(e,t){const r=new Array(4);for(let o=1;o<4;o++){for(let n=0;n<4;n++)r[n]=e[o][(n+o)%t];for(let t=0;t<4;t++)e[o][t]=r[t]}return e}static mixColumns(e,t){for(let r=0;r<t;r++){const o=new Array(t),n=new Array(t);for(let t=0;t<4;t++)o[t]=e[t][r],n[t]=128&e[t][r]?e[t][r]<<1^283:e[t][r]<<1;e[0][r]=n[0]^o[1]^n[1]^o[2]^o[3],e[1][r]=o[0]^n[1]^o[2]^n[2]^o[3],e[2][r]=o[0]^o[1]^n[2]^o[3]^n[3],e[3][r]=o[0]^n[0]^o[1]^o[2]^n[3]}return e}static addRoundKey(e,t,r,o){for(let n=0;n<4;n++)for(let s=0;s<o;s++)e[n][s]^=t[4*r+s][n];return e}static subWord(e){for(let t=0;t<4;t++)e[t]=Aes.sBox[e[t]];return e}static rotWord(e){const t=e[0];for(let t=0;t<3;t++)e[t]=e[t+1];return e[3]=t,e}}Aes.sBox=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22],Aes.rCon=[[0,0,0,0],[1,0,0,0],[2,0,0,0],[4,0,0,0],[8,0,0,0],[16,0,0,0],[32,0,0,0],[64,0,0,0],[128,0,0,0],[27,0,0,0],[54,0,0,0]];class AesCtr extends Aes{static encrypt(e,t,r){if(![128,192,256].includes(r))throw new Error("Key size is not 128 / 192 / 256");t=AesCtr.utf8Encode(String(t));const o=r/8,n=new Array(o);for(let e=0;e<o;e++)n[e]=e<t.length?t.charCodeAt(e):0;let s=Aes.cipher(n,Aes.keyExpansion(n));s=s.concat(s.slice(0,o-16));const c=(new Date).getTime(),a=c%1e3,f=Math.floor(c/1e3),i=Math.floor(65535*Math.random()),l=[255&a,a>>>8&255,255&i,i>>>8&255,255&f,f>>>8&255,f>>>16&255,f>>>24&255,0,0,0,0,0,0,0,0],d=(l.slice(0,8).map(e=>String.fromCharCode(e)).join(""),AesCtr.nistEncryption(e,s,l));var u=l.slice(0,8);return u=u.concat(d)}static nistEncryption(e,t,r){const o=Aes.keyExpansion(t),n=Math.ceil(e.length/16),s=new Array(e.length);for(let t=0;t<n;t++){const c=Aes.cipher(r,o),a=t<n-1?16:(e.length-1)%16+1;for(let r=0;r<a;r++)s[16*t+r]=c[r]^e[16*t+r];r[15]++;for(let e=15;e>=8;e--)r[e-1]+=r[e]>>8,r[e]&=255;"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&t%1e3==0&&self.postMessage({progress:t/n})}return s}static decrypt(e,t,r){if(![128,192,256].includes(r))throw new Error("Key size is not 128 / 192 / 256");t=AesCtr.utf8Encode(String(t));const o=r/8,n=new Array(o);for(let e=0;e<o;e++)n[e]=e<t.length?t.charCodeAt(e):0;let s=Aes.cipher(n,Aes.keyExpansion(n));s=s.concat(s.slice(0,o-16));const c=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(let t=0;t<8;t++)c[t]=e[t];const a=new Array(e.length-8);for(let t=8;t<e.length;t++)a[t-8]=e[t];return AesCtr.nistDecryption(a,s,c)}static nistDecryption(e,t,r){const o=Aes.keyExpansion(t),n=Math.ceil(e.length/16),s=new Array(e.length);for(let t=0;t<n;t++){const c=Aes.cipher(r,o),a=t<n-1?16:(e.length-1)%16+1;for(let r=0;r<a;r++)s[16*t+r]=c[r]^e[16*t+r];r[15]++;for(let e=15;e>=8;e--)r[e-1]+=r[e]>>8,r[e]&=255;"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&t%1e3==0&&self.postMessage({progress:t/n})}return s}static utf8Encode(e){try{return(new TextEncoder).encode(e,"utf-8").reduce((e,t)=>e+String.fromCharCode(t),"")}catch(t){return unescape(encodeURIComponent(e))}}static utf8Decode(e){try{return(new TextEncoder).decode(e,"utf-8").reduce((e,t)=>e+String.fromCharCode(t),"")}catch(t){return decodeURIComponent(escape(e))}}static base64Encode(e){if("undefined"!=typeof btoa)return btoa(e);if("undefined"!=typeof Buffer)return new Buffer(e,"binary").toString("base64");throw new Error("No Base64 Encode")}static base64Decode(e){if("undefined"!=typeof atob)return atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString("binary");throw new Error("No Base64 Decode")}}module.exports={AesCtr:AesCtr};